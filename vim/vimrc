" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" pathogen
execute pathogen#infect()

" Use Vim settings, rather then Vi settings 
" This must be first, because it changes other options as a side effect.
set nocompatible

" turn on line numbering
" set number

" we have to put this here because some of these will not override
" previous settings
let python_highlight_all=1

" Allow Vim to manage multiple buffers effectively.
"
"   * The current buffer can be put to the background without writing to disk
"
"   * When a background buffer becomes current again, marks and undo-history
"   are remembered.
"
set hidden

" Make sure we set current directory to that of the buffer we
" are editing. 
"set autochdir

" Spell checking file for adding new words
set spellfile=~/.vim/spellfile.add
set spelllang=en_us

"This keeps the current visual block selection active after changing indent
"with '<' or '>'. Usually the visual block selection is lost after you shift
"it, which is incredibly annoying.

vmap > >gv
vmap < <gv


" does same as autochdir but doesn't cause crash?
autocmd BufEnter * lcd %:p:h

" For completion of files. This is like ambiguous in the shell 
"set wildmode=longest,list,full
set wildmode=list:longest,full
"set wildmenu

" Always show the filename at the bottom
set laststatus=2

" The content of the status line
set statusline=%F%m%r%h%w%=%(\ %04v\ %04l/%04L\ [%p%%]%)

" Turn off bells and flashes. 
set noerrorbells
set vb
set t_vb=
autocmd GUIEnter * set vb t_vb=

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=2000    " command line history
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
set incsearch       " do incremental searching

" turn off the highlighting left from previous search
nnoremap ,<space> :nohlsearch<CR>

" Don't use Ex mode, use Q for formatting
" The following mappings make Q normally reformat the current paragraph (or
" current and following paragraphs, if a count is used), except when text is
" selected, in which case it reformats the selected text: 
" difference between a and i here is a moves you to *after* the paragraph.

" n is for normal mode
nnoremap Q gqap
" v is for visual mode.
vnoremap Q gq

command! PtpythonEmbed normal ifrom ptpython.repl import embed; embed(globals(), locals(), vi_mode=True)
command! IpythonEmbed normal iimport IPython; IPython.embed()

" Let h,l and cursor ceys wrap across begin and end line"
set whichwrap=h,l,[,]

" set up some functions to do colorscheme changes
" we always want this
let zenburn_high_Contrast=1
function! s:Zenburn()
    let zenburn_high_Contrast=1
    colorscheme zenburn_simple
endfunction
command! -bang -complete=buffer -nargs=? Zenburn call <SID>Zenburn()

function! s:Default()
    colorscheme default
endfunction
command! -bang -complete=buffer -nargs=? Default call <SID>Default()

if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch

    if has("gui_running")
        set background=light
        colorscheme mynuvola

        " Set pointer
        set mouseshape=a:beam

        "set gfn=peep\ 12
        "set gfn=-zevv-peep-medium-r-normal--16-140-75-75-c-80-iso8859-1
        " set gfn=Terminus\ 12
        set gfn=Inconsolata\ Bold\ 18

        " turn off annoying cursor blinking
        set gcr=a:blinkon0

        " Turn off useless toolbar
        set guioptions-=T

        " Turn off menu bar (toggle with CTRL+F11)
        set guioptions-=m

        " Turn off right-hand, left-hand scrollbars
        set guioptions-=r
        set guioptions-=l

        " Even turn them off if the window is split
        set guioptions-=R
        set guioptions-=L

        " CTRL+F11 to toggle the menu bar
        nmap <C-F11> :if &guioptions=~'m' \| set guioptions-=m \| else \| set guioptions+=m \| endif<CR>

        " CTRL+F7 to toggle the right-hand scroll bar
        nmap <C-F7> :if &guioptions=~'r' \| set guioptions-=r \| else \| set guioptions+=r \| endif<CR>

    else

        " we could turn on termguicolors if we want.  Will need
        " these also
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

        set background=dark

        " set termguicolors
        Zenburn()

    endif

endif 

hi Search guibg=peru guifg=wheat

" comments get italic font
" highlight Comment cterm=italic gui=italic

" will turn it back on later
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'
Bundle 'chase/vim-ansible-yaml'
Bundle 'cespare/vim-toml'
Bundle 'tomtom/tcomment_vim'
Plugin 'vim-python/python-syntax'
Plugin 'plasticboy/vim-markdown'
Plugin 'JuliaLang/julia-vim'
Plugin 'rust-lang/rust.vim'
Plugin 'nvie/vim-flake8'

" probably only want this on local machine
" also see section below "coc code completion"
" Need node installed.  On local machine did curl -sL install-node.vercel.app/lts | sudo bash
" to get checking/completion to work outside of loaded files,
" need to install language server :CocInstall coc-pyright
" for more config do :CocConfig and edit config file (can also do directly)
" May have to go to ~/.vim/bundle/coc.nvim and "git checkout release"
"
" Plugin 'neoclide/coc.nvim', {'branch': 'release'}

set tags=tags;/

let g:vim_markdown_folding_disabled=1

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
    au!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

augroup END

"autocmd FileType c,cpp,cc,h,hpp set cindent
set autoindent
set tabstop=4
"set softtabstop=4
set shiftwidth=4
" expand tabs into spaces
set expandtab

" yaml indentation
au FileType yaml setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4

" C-indent mode "
set cindent "
" This only indents by 2 space "
" set cinoptions=>2

" align function args
set cino=(0

" Tab-indenting "
set cinkeys=0{,0},:,0#,!<Tab>,!^F

" ignore case on searches "
set ignorecase
" but don't ignore if there's a capital in the search
set smartcase

" Gui specific stuff
set guioptions-=T

set backup  " keep a backup file

" show paren matches
set showmatch

"gpg stuff
let g:GPGPreferSymmetric = 1
let g:GPGPreferArmor = 1

" don't remove indent when # first on line!
inoremap # X#

au BufNewFile,BufRead *.ooc set filetype=ooc

" anything with .sh extension treat as bash.  Also works
" when using set ft=sh
let g:is_bash=1

" turn off inserting comment lines
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"
" coc code completion
"

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1) :
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation for the object under the
" cursor, in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" to allow scrolling in the pop up window
set mouse=a

set viminfo+=n~/.vim/viminfo
